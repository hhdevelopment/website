"use strict";(self.webpackChunksoftwarity=self.webpackChunksoftwarity||[]).push([[5983],{6924:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>n,metadata:()=>a,toc:()=>l});var s=t(5893),r=t(1151);const n={slug:"intro",title:"Introduction",authors:"fachache",tags:[]},o=void 0,a={id:"pres/intro",title:"Introduction",description:"ARCHWAY was born from the observation that most projects based on a microservice architecture had the same needs.",source:"@site/docs/pres/intro.md",sourceDirName:"pres",slug:"/pres/intro",permalink:"/pres/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/softwarity/website/tree/main/docs/pres/intro.md",tags:[],version:"current",frontMatter:{slug:"intro",title:"Introduction",authors:"fachache",tags:[]},sidebar:"presSidebar",next:{title:"Features",permalink:"/pres/features"}},c={},l=[{value:"ARCHWAY: An <del>API</del> APP Gateway",id:"archway-an-api-app-gateway",level:2},{value:"API Gateway",id:"api-gateway",level:3},{value:"Microservices Architecture",id:"microservices-architecture",level:3},{value:"Implications",id:"implications",level:3},{value:"APP Gateway",id:"app-gateway",level:3}];function h(e){const i={admonition:"admonition",code:"code",del:"del",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(i.p,{children:["ARCHWAY was born from the observation that most projects based on a microservice architecture had the same needs.\nWithin companies, teams often, due to lack of knowledge, dissatisfaction with existing ",(0,s.jsx)(i.code,{children:"API Gateways"}),", or simply by choice, prefer to develop their own solution."]}),"\n",(0,s.jsxs)(i.p,{children:["Often this solution is called ",(0,s.jsx)(i.code,{children:"PORTAL"}),", ",(0,s.jsx)(i.code,{children:"GATE"}),", or something similar. If you find yourself in this situation, you are in the right place."]}),"\n",(0,s.jsx)(i.p,{children:"Generally, a custom solution allows for easier control over several aspects such as user management."}),"\n",(0,s.jsxs)(i.h2,{id:"archway-an-api-app-gateway",children:["ARCHWAY: An ",(0,s.jsx)(i.del,{children:"API"})," APP Gateway"]}),"\n",(0,s.jsx)(i.admonition,{type:"info",children:(0,s.jsxs)(i.p,{children:["Archway is an ",(0,s.jsx)(i.code,{children:"Application gateway"}),", a kind of super ",(0,s.jsx)(i.code,{children:"API Gateway"}),"."]})}),"\n",(0,s.jsxs)(i.p,{children:["In short, if you know what an ",(0,s.jsx)(i.code,{children:"API Gateway"})," is, you will quickly understand what an ",(0,s.jsx)(i.code,{children:"APP Gateway"})," is."]}),"\n",(0,s.jsxs)(i.p,{children:["Especially, ",(0,s.jsx)(i.code,{children:"ARCHWAY"})," offers a complete user interface that allows controlling all its features."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"ARCHWAY"})," was conceived by and for developers of web applications based on a microservices architecture. It allows for quickly and at runtime switching the position of a service within the cluster or outside the cluster. This easily facilitates working on a microservice without the need to manage complex redirections."]}),"\n",(0,s.jsx)(i.h3,{id:"api-gateway",children:"API Gateway"}),"\n",(0,s.jsxs)(i.p,{children:["An ",(0,s.jsx)(i.code,{children:"API Gateway"})," is a service that primarily manages the routing of requests from an application based on a microservice architecture, especially within a ",(0,s.jsx)(i.code,{children:"cluster"}),"."]}),"\n",(0,s.jsx)(i.admonition,{type:"note",children:(0,s.jsxs)(i.p,{children:["In a microservice architecture, the application is no longer built on ",(0,s.jsx)(i.strong,{children:"one"})," ",(0,s.jsx)(i.code,{children:"client"})," and ",(0,s.jsx)(i.strong,{children:"one"})," server, but rather ",(0,s.jsx)(i.strong,{children:"one"})," ",(0,s.jsx)(i.code,{children:"client"})," ",(0,s.jsx)(i.strong,{children:"(or several)"})," and ",(0,s.jsx)(i.strong,{children:"multiple"})," microservices."]})}),"\n",(0,s.jsx)(i.h3,{id:"microservices-architecture",children:"Microservices Architecture"}),"\n",(0,s.jsx)(i.p,{children:"Microservice architecture is a good architecture because it allows, among other things:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Easier Scalability"}),": Microservices allow each service to evolve individually according to its needs. This facilitates horizontal scaling of services that require more resources without having to scale the entire application."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Agile Development"}),": Development teams can work autonomously on specific microservices. This promotes agile development, speeds up deployment, and allows for more frequent production updates."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Error Isolation"}),": In case of failure or bug in a microservice, it generally does not affect the entire system. Errors are isolated, which facilitates diagnosis and resolution."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Suitable Technologies"}),": Each microservice can be developed using the technology best suited to its use case, allowing for the use of different technologies within the application."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Better Resource Utilization"}),": Hardware and software resources can be allocated more efficiently because each microservice can run on independent servers."]}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"implications",children:"Implications"}),"\n",(0,s.jsx)(i.p,{children:"As previously mentioned, we no longer have a server addressable by its address, but multiple services."}),"\n",(0,s.jsxs)(i.p,{children:["These must be addressed in such a way that they are easily reachable by the ",(0,s.jsx)(i.code,{children:"client"})," (usually a web application)."]}),"\n",(0,s.jsxs)(i.p,{children:["The problem is, in a ",(0,s.jsx)(i.code,{children:"cluster"})," (swarm or k8s), we do not know where the services are. It would not be reasonable to expose all services on different ports."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"# absolute request (to never do)\nGET http://host:port/path1/path2?param1=value1&param2=value2\n# relative request from root\nGET /path1/path2?param1=value1&param2=value2\n# relative request from path of current path (to avoid)\nGET path2?param1=value1&param2=value2\n"})}),"\n",(0,s.jsxs)(i.p,{children:["This is not feasible. Imagine having to deliver each ",(0,s.jsx)(i.code,{children:"client"})," with different ",(0,s.jsx)(i.code,{children:"URLs"})," and manage all services with distinct ports. It would quickly become unmanageable."]}),"\n",(0,s.jsxs)(i.p,{children:["Fortunately, ",(0,s.jsx)(i.code,{children:"clusters"})," have their own ",(0,s.jsx)(i.code,{children:"DNS"})," manager, the ",(0,s.jsx)(i.code,{children:"ingress"}),". In the ",(0,s.jsx)(i.code,{children:"cluster"}),", each microservice is identified by a fixed name."]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"ingress"})," will maintain the resolution of services by their name, regardless of the number of instances of it, their positions (multi-nodes), or their ",(0,s.jsx)(i.code,{children:"IPs"}),". However, the ",(0,s.jsx)(i.code,{children:"ingress"})," is not accessible from outside the ",(0,s.jsx)(i.code,{children:"cluster"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"API Gateway"})," will be the sole agent that will enable resolving services in the ",(0,s.jsx)(i.code,{children:"cluster"})," from the ",(0,s.jsx)(i.code,{children:"client"})," who is outside the ",(0,s.jsx)(i.code,{children:"cluster"})," (generally a web browser)."]}),"\n",(0,s.jsxs)(i.p,{children:["Imagine a web service ",(0,s.jsx)(i.code,{children:"foo-service"})," deployed in the ",(0,s.jsx)(i.code,{children:"cluster"}),". It exposes an endpoint ",(0,s.jsx)(i.code,{children:"GET api/v1/bar"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["From outside the ",(0,s.jsx)(i.code,{children:"cluster"}),", you of course want to access this ",(0,s.jsx)(i.code,{children:"endpoint"}),". A web application (",(0,s.jsx)(i.code,{children:"HTML/CSS/JS"}),"), probably itself from a microservice in the ",(0,s.jsx)(i.code,{children:"cluster"}),".\nThis application does not directly know the ",(0,s.jsx)(i.code,{children:"IP"})," or ",(0,s.jsx)(i.code,{children:"DNS"})," of ",(0,s.jsx)(i.code,{children:"foo-service"}),".\nHowever, it knows how to query the server from which the application itself is issued.\nRelatively, it can therefore query the service ",(0,s.jsx)(i.code,{children:"./foo/api/v1/bar"}),". (note the prefix ",(0,s.jsx)(i.code,{children:"foo"})," which may differ from the service name ",(0,s.jsx)(i.code,{children:"foo-service"}),")\nThis request will arrive at the ",(0,s.jsx)(i.code,{children:"API Gateway"}),", which knows that requests prefixed by ",(0,s.jsx)(i.code,{children:"foo"})," should be redirected to the service ",(0,s.jsx)(i.code,{children:"foo-service"}),". And there you have it."]}),"\n",(0,s.jsxs)(i.p,{children:["Now that the primary interest of the ",(0,s.jsx)(i.code,{children:"API Gateway"})," is touched upon. What does this imply?"]}),"\n",(0,s.jsx)(i.p,{children:"Since it is located at the front of our application, it can take care of a number of things for us."}),"\n",(0,s.jsxs)(i.p,{children:["For example, the authentication and authorization part. Indeed, since the ",(0,s.jsx)(i.code,{children:"API Gateway"})," is the gateway to our services, it seems a good choice to delegate this task to it."]}),"\n",(0,s.jsx)(i.h3,{id:"app-gateway",children:"APP Gateway"}),"\n",(0,s.jsxs)(i.p,{children:["Routing, the primary function of ",(0,s.jsx)(i.code,{children:"API Gateways"}),", is (hopefully) very well handled by the market's ",(0,s.jsx)(i.code,{children:"API Gateways"}),".\nSometimes this involves somewhat obscure configuration files, but why not."]}),"\n",(0,s.jsx)(i.p,{children:"However, their roles generally stop there. While most offer basic authentication mechanisms via hard-coded user files, this obviously cannot be used in production."}),"\n",(0,s.jsxs)(i.p,{children:["Moreover, the authorization part is limited to routes since these are the only objects known to the ",(0,s.jsx)(i.code,{children:"API Gateway"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["Generally, all ",(0,s.jsx)(i.code,{children:"API Gateways"})," propose connecting it to external services such as ",(0,s.jsx)(i.code,{children:"KeyCloak"})," or ",(0,s.jsx)(i.code,{children:"Okta"})," via ",(0,s.jsx)(i.code,{children:"oauth2"})," to handle authentication and authorizations.\nThis is of course a good solution in itself to delegate this to a third-party service. But from our point of view, this greatly complicates the architecture of the application, especially for ",(0,s.jsx)(i.code,{children:"on-premise"})," applications and even more so for applications that are installed in a private network (without internet)."]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"APP Gateway"})," will therefore propose a certain number of services including the authentication and authorization part, turnkey."]})]})}function d(e={}){const{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},1151:(e,i,t)=>{t.d(i,{Z:()=>a,a:()=>o});var s=t(7294);const r={},n=s.createContext(r);function o(e){const i=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(n.Provider,{value:i},e.children)}}}]);