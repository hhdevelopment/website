"use strict";(self.webpackChunksoftwarity=self.webpackChunksoftwarity||[]).push([[9481],{1359:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var i=t(5893),s=t(1151);const r={slug:"custerization",title:"Clusterization",authors:"fachache",tags:[]},a="BUSINESS EDITION",l={id:"doc/conf/clusterization",title:"Clusterization",description:"This feature is only accessible in the business version.",source:"@site/docs/doc/conf/clusterization.md",sourceDirName:"doc/conf",slug:"/doc/conf/custerization",permalink:"/doc/conf/custerization",draft:!1,unlisted:!1,editUrl:"https://github.com/softwarity/website/tree/main/docs/doc/conf/clusterization.md",tags:[],version:"current",frontMatter:{slug:"custerization",title:"Clusterization",authors:"fachache",tags:[]},sidebar:"docuSidebar",previous:{title:"HTTPS - HTTP/2",permalink:"/doc/conf/https"},next:{title:"Me",permalink:"/doc/user-profil/me"}},c={},o=[{value:"RABBITMQ",id:"rabbitmq",level:2},{value:"SWARM",id:"swarm",level:3},{value:"KUBERNETES",id:"kubernetes",level:3},{value:"Replicas",id:"replicas",level:2},{value:"SWARM",id:"swarm-1",level:3},{value:"KUBERNETES",id:"kubernetes-1",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.h1,{id:"business-edition",children:"BUSINESS EDITION"}),(0,i.jsx)(n.p,{children:"This feature is only accessible in the business version."})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ARCHWAY"})," supports being clustered within a ",(0,i.jsx)(n.code,{children:"SWARM"})," or ",(0,i.jsx)(n.code,{children:"KUBERNETES"})," style cluster."]}),"\n",(0,i.jsxs)(n.p,{children:["To operate with multiple instances, ",(0,i.jsx)(n.code,{children:"ARCHWAY"})," needs the instances to synchronize with each other."]}),"\n",(0,i.jsxs)(n.p,{children:["To do this, ",(0,i.jsx)(n.code,{children:"ARCHWAY"})," uses ",(0,i.jsx)(n.code,{children:"RABBITMQ"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"rabbitmq",children:"RABBITMQ"}),"\n",(0,i.jsxs)(n.p,{children:["So, you just need to deploy a ",(0,i.jsx)(n.code,{children:"RABBITMQ"})," as described ",(0,i.jsx)(n.a,{href:"https://hub.docker.com/_/rabbitmq",children:"here"})," and provide the connection information to ",(0,i.jsx)(n.code,{children:"ARCHWAY"})," during its deployment."]}),"\n",(0,i.jsxs)(n.p,{children:["If the connection information is present, ",(0,i.jsx)(n.code,{children:"ARCHWAY"})," will create a ",(0,i.jsx)(n.code,{children:"TOPIC"})," type topology to synchronize."]}),"\n",(0,i.jsx)(n.p,{children:"The names of the variables to define the connection information are as follows."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"name"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"optional"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"default value"}),(0,i.jsx)(n.th,{children:"description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"RABBITMQ_HOST"}),(0,i.jsx)(n.td,{style:{textAlign:"center"}}),(0,i.jsx)(n.td,{style:{textAlign:"center"}}),(0,i.jsxs)(n.td,{children:["The ",(0,i.jsx)(n.code,{children:"host"})," of the rabbitmq, in the cluster this should be the name of the ",(0,i.jsx)(n.code,{children:"rabbitmq"})," service. If this value is absent, cluster mode is disabled"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"RABBITMQ_PORT"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"5672"}),(0,i.jsx)(n.td,{children:"The listening port of the rabbitmq, by default 5672"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"RABBITMQ_USER"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"guest"}),(0,i.jsxs)(n.td,{children:["The default login of rabbitmq is ",(0,i.jsx)(n.code,{children:"guest"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"RABBITMQ_PWD"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"guest"}),(0,i.jsxs)(n.td,{children:["The default password of rabbitmq is ",(0,i.jsx)(n.code,{children:"guest"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"ARCHWAY_ID"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"\u2714"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"IP4: \\d+.\\d+.\\d+.(<id>\\d+)"}),(0,i.jsxs)(n.td,{children:["This value is calculated with the container's IP, specifically the least significant byte. You can use an identifier related to the container number like ",(0,i.jsx)(n.code,{children:".Task.Slot"})," in ",(0,i.jsx)(n.code,{children:"SWARM"})," or ",(0,i.jsx)(n.code,{children:"metadata.uid"})," in ",(0,i.jsx)(n.code,{children:"kubernetes"})]})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"swarm",children:"SWARM"}),"\n",(0,i.jsxs)(n.p,{children:["Here is an example of a ",(0,i.jsx)(n.code,{children:"docker-compose.yml"})," with the ",(0,i.jsx)(n.code,{children:"RABBITMQ"})," connection information."]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"docker-compose.yml"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:'version: \'3.8\'\nservices:\n  archway:\n    image: ghcr.io/softwarity/archway-be:latest\n    # highlight-start\n    deploy:      \n      replicas: 3 # here define instance number\n      restart_policy:\n        condition: any\n    # highlight-end\n    ports:\n      - 8080:8080 # HTTP\n    environment:\n      # highlight-start\n      ARCHWAY_ID: "{{.Task.Slot}}"\n      RABBITMQ_HOST: rabbitmq\n      # RABBITMQ_PORT: 5672\n      # RABBITMQ_USER: guest\n      # RABBITMQ_PWD: guest\n      # highlight-end\n      MONGODB_HOST: mongodb \n      MONGODB_DB_NAME: archway\n      MONGODB_USER: admin\n      MONGODB_PWD: changeit\n    networks:\n      - dnet\n\n  mongodb:\n    image: mongo # official image  \n    volumes:\n      - mongodb_data:/data/db\n    environment:\n      MONGO_INITDB_DATABASE: archway\n      MONGO_INITDB_ROOT_USERNAME: admin\n      MONGO_INITDB_ROOT_PASSWORD: changeit\n    networks:\n      - dnet\n\n  rabbitmq:\n    image: rabbitmq:3-management-alpine\n    volumes: \n      - "rabbitmq_data:/var/lib/rabbitmq/"\n    networks:\n      - dnet\n\nvolumes:\n  rabbitmq_data:\n\nvolumes:\n  mongodb_data:\n\n'})})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"kubernetes",children:"KUBERNETES"}),"\n",(0,i.jsxs)(n.p,{children:["Here is an example of ",(0,i.jsx)(n.code,{children:"deployment.yaml"})," with the connection information of the ",(0,i.jsx)(n.code,{children:"RABBITMQ"}),"."]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"templates/deployment.yaml"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",metastring:"showLineNumbers",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: archway-deployment\nspec:\n  # highlight-start\n  replicas: 3\n  # highlight-end\n  selector:\n    matchLabels:\n      app: archway-app\n  template:\n    metadata:\n      labels:\n        app: archway-app\n    spec:\n      containers:\n        - name: archway-container\n          image: ghcr.io/softwarity/archway-be\n          ports:\n            - containerPort: 8080\n          env:\n            # highlight-start\n            - name: ARCHWAY_ID\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.uid\n            - name: RABBITMQ_HOST\n              value: "rabbitmq"\n            - name: RABBITMQ_PORT\n              value: 5672\n            - name: RABBITMQ_USER\n              value: "guest"\n            - name: RABBITMQ_PWD\n              value: "guest"\n            - name: MONGODB_HOST\n              value: "mongodb"\n            - name: MONGODB_DB_NAME\n              value: "archway"\n            - name: MONGODB_USER\n              value: "admin"\n            - name: MONGODB_PWD\n              value: "changeit"\n            # highlight-end\n\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"replicas",children:"Replicas"}),"\n",(0,i.jsxs)(n.p,{children:["Activating cluster mode is of course not enough, it is appropriate to deploy ",(0,i.jsx)(n.code,{children:"ARCHWAY"})," in a suitable architecture. Generally a cluster made up of several ",(0,i.jsx)(n.code,{children:"node"})," nodes."]}),"\n",(0,i.jsx)(n.p,{children:"Then you also need to define the desired number of replicas within the cluster. Which you can define as follows in your deployment files."}),"\n",(0,i.jsx)(n.h3,{id:"swarm-1",children:"SWARM"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",metastring:'title="docker-compose.yml" showLineNumbers',children:"  ...\n  archway:\n    image: ghcr.io/softwarity/archway-be:latest\n    # highlight-start\n    deploy:      \n      replicas: 3 # here define instance number\n      restart_policy:\n        condition: any\n    # highlight-end\n    ...\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"kubernetes-1",children:"KUBERNETES"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yml",metastring:'title="templates/deployment.yaml" showLineNumbers',children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: archway-deployment\nspec:\n  # highlight-start\n  replicas: 3\n  # highlight-end\n  ...\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>a});var i=t(7294);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);